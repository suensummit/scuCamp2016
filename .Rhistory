}
p
p <- 1/2
for (i in 1:10){
p <- p + p*(1/4)^i
}
p
p <- 1/2
for (i in 1:10){
p <- p + p*(1/4)^i
p
}
p <- 1/2
for (i in 1:10){
p <- p + p*(1/4)^i
print(p)
}
t <- c(1:100)
head((1/4)^t)
sum(head((1/4)^t))
sum(head(1/2*(1/4)^t))
sum(head(1/2*(1/4)^t, 2))
sum(head(1/2*(1/4)^t, 1))
sum(head(1/2*(1/4)^t, 2))
sum(head(1/2*(1/4)^t, 3))
sum(head(1/2*(1/4)^t, 4))
sum(head(1/2*(1/4)^t, 5))
p <- 1/2
for (i in 1:10){
p <- p + 1/2*(1/4)^i
print(p)
}
p
p <- 1/2
for (i in 1:100){
p <- p + 1/2*(1/4)^i
print(p)
}
p
p <- 1/2
t <- c(1:100)
p <- p + p*sum((1/4)^t)
p
q()
?time
p <- 1/2
for (i in 1:1000){
p <- p + 1/2*(1/4)^i
print(p)
}
p
p <- 1/2
t <- c(1:1000)
p <- p + p*sum((1/4)^t)
p
?numeric
p1 <- 1/2
for (i in 1:1000){
p1 <- p1 + 1/2*(1/4)^i
}
p1
p2 <- 1/2
t <- c(1:1000)
p2 <- p2 + p2*sum((1/4)^t)
p2
p1 == p2
p3 <- p2*sum((1/4)^c(0:1000))
p3
p3 <- 1/2*sum((1/4)^c(0:1000))
p3
p <- 0
for (i in 0:1000){
p <- p + 1/2*(1/4)^i
}
p
currenttime=proc.time()	## current time record
p <- 0
for (i in 0:1000){
p <- p + 1/2*(1/4)^i
}
(spttime=proc.time()-currenttime)
p
currenttime=proc.time()	## current time record
p <- 0
for (i in 0:1000){
p <- p + 1/2*(1/4)^i
}
(spttime=proc.time()-currenttime)
p
currenttime=proc.time()	## current time record
p <- 1/2
t <- c(0:1000)
p <- p*sum((1/4)^t)
# p <- 1/2*sum((1/4)^c(0:1000)) # calculate in one line
(spttime=proc.time()-currenttime)
p
currenttime=proc.time()	## current time record
p <- 1/2*sum((1/4)^c(0:1000)) # calculate in one line
(spttime=proc.time()-currenttime)
p
currenttime=proc.time()	## current time record
p <- 0
for (i in 0:1000){
p <- p + 1/2*(1/4)^i
}
(spttime=proc.time()-currenttime)
p
# currenttime=proc.time()	## current time record
p <- 1/2
t <- c(0:1000)
p <- p*sum((1/4)^t)
currenttime=proc.time()	## current time record
p <- 1/2*sum((1/4)^c(0:1000)) # calculate in one line
(spttime=proc.time()-currenttime)
p
?proc.time
temp <- proc.time()	## current time record
p <- 1/2*sum((1/4)^c(0:1000)) # calculate in one line
spttime <- proc.time() - temp
p
temp <- proc.time()	## current time record
p <- 1/2*sum((1/4)^c(0:1000)) # calculate in one line
(spttime <- proc.time() - temp)
p
temp <- proc.time()	## current time record
p <- 0
for (i in 0:1000){
p <- p + 1/2*(1/4)^i
}
(spttime <- proc.time() - temp)
p
rm(p, p1, p2)
rm(list = ls())
?'<-'
?'='
?'<<-'
?help
??help
1 + 1
1:10
x <- c(1:10)
y <- c(2:5)
x/y
source('~/.active-rstudio-document', echo=TRUE)
1 + 1
1:10
x <- c(1:10)
y <- c(2:5)
x + y
y + x
x * y
q()
library(DSC2015R)
swirl()
slides
slide()
q()
install.packages("drat", repos="https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("mxnet")
library(mxnet)
?"mxnet"
q()
install.packages(gdata)
install.packages("gdata")
getwd()
library(httr)
?POST
url = "http://www.starbucks.com.tw/store/region.serx"
res = POST(url = url, body = list(cid=11))
head(res)
res$content
node = xmlParse(content(res, as="text"))
library(XML)
node = xmlParse(content(res, as="text"))
url = "http://www.starbucks.com.tw/store/region.serx"
res = POST(url = url, body = list(cid=11))
node = xmlParse(content(res, as="text"))
resText <- content(res,'text')
resText
url = "http://www.starbucks.com.tw/stores/storesearch/stores_storesearch.jspx"
res = POST(url = url)
resText <- content(res,'text')
head(resText)
url = "http://www.starbucks.com.tw/stores/storesearch/stores_storesearch.jspx"
res = POST(url = url, body = list(selCity = 11, selRegion = 106))
resText <- content(res,'text')
head(resText)
node = xmlParse(content(res, as="text"))
url = "http://www.starbucks.com.tw/stores/storesearch/stores_storesearch.jspx"
res = POST(url = url, body = list("selCity" = 14,
"selRegion" = "ALL",
"sbForm:btnByRegion" = "sbForm:btnByRegion",
"AJAXREQUEST" = "sbForm:j_id_jsp_201517923_2",
"sbForm:drive" = 1,
"sbForm_SUBMIT" = 1))
resText <- content(res,'text')
head(resText)
node = xmlParse(content(res, as = "text"))
View(xmlToDataFrame(node["//GeoPosition"]))
View(resText)
?node
install.packages("CSS")
res <- htmlParse(res)
head(res)
res = POST(url = url, body = list("selCity" = 14,
"selRegion" = "ALL",
"sbForm:btnByRegion" = "sbForm:btnByRegion",
"AJAXREQUEST" = "sbForm:j_id_jsp_201517923_2",
"sbForm:drive" = 1,
"sbForm_SUBMIT" = 1))
res <- htmlParse(res)
url = "http://www.starbucks.com.tw/stores/storesearch/stores_storesearch.jspx"
res = POST(url = url, body = list("selCity" = 14,
"selRegion" = "ALL",
"sbForm:btnByRegion" = "sbForm:btnByRegion",
"AJAXREQUEST" = "sbForm:j_id_jsp_201517923_2",
"sbForm:drive" = 1,
"sbForm_SUBMIT" = 1))
resText <- content(res,'text')
head(resText)
node = xmlParse(content(res, as = "text"))
node = xmlParse(content(resText, as = "text"))
node = xmlParse(content(res, as = "text"))
View(xmlToDataFrame(node["//GeoPosition"]))
node = xmlParse(content(res, as = "text"))
node = xmlParse(content(res))
?xmlValue
?xmlParse
url = "http://www.starbucks.com.tw/stores/storesearch/stores_storesearch.jspx"
res = POST(url = url, body = list("selCity" = 11,
"selRegion" = "ALL",
"sbForm:btnByRegion" = "sbForm:btnByRegion",
"AJAXREQUEST" = "sbForm:j_id_jsp_201517923_2",
"sbForm:drive" = 1,
"sbForm_SUBMIT" = 1))
resText <- content(res,'text')
res$url
res$status_code
res$headers
res$cookies
res$content
node = xmlParse(res$content)
node = xmlParse(res$content)
node
node = xmlParse(res$content)
doc <- htmlParse(res)
doc[]
doc["//searchstore_name"]
doc["//searchstore_name"]
install.packages("plotly")
library(plotly)
?ggplotly
example(ggplotly)
ggiris <- qplot(Petal.Width, Sepal.Length, data = iris, color = Species)
ggplotly(ggiris)
data(canada.cities, package = "maps")
viz <- ggplot(canada.cities, aes(long, lat)) +
borders(regions = "canada", name = "borders") +
coord_equal() +
geom_point(aes(text = name, size = pop), colour = "red",
alpha = 1/2, name = "cities")
ggplotly(viz)
install.packages("maps")
install.packages("maps")
data(canada.cities, package = "maps")
viz <- ggplot(canada.cities, aes(long, lat)) +
borders(regions = "canada", name = "borders") +
coord_equal() +
geom_point(aes(text = name, size = pop), colour = "red",
alpha = 1/2, name = "cities")
ggplotly(viz)
rm(list = ls())
library(plotly)
?ggplotly
example(ggplotly)
ggiris <- qplot(Petal.Width, Sepal.Length, data = iris, color = Species)
ggplotly(ggiris)
# install.packages("maps")
data(canada.cities, package = "maps")
viz <- ggplot(canada.cities, aes(long, lat)) +
borders(regions = "canada", name = "borders") +
coord_equal() +
geom_point(aes(text = name, size = pop), colour = "red",
alpha = 1/2, name = "cities")
ggplotly(viz)
q(*)
q()
q()
q()
install.packages("rjdbc")
install.packages("RODBC")
source("https://raw.githubusercontent.com/suensummit/RCourseBankSinoPac/master/installPackages.R")
source("https://raw.githubusercontent.com/suensummit/RCourseBankSinoPac/master/installPackages.R")
install.packages("qgraph")
install.packages("qgraph")
q()
DF = data.frame(x=c("b","b","b","a","a"),v=rnorm(5))
DT = data.table(x=c("b","b","b","a","a"),v=rnorm(5))
library(data.table)
DT = data.table(x=c("b","b","b","a","a"),v=rnorm(5))
CARS = data.table(cars)
head(CARS)
tables()
sapply(DT,class)
DT[2,]
DT[x=="b",]
cat(try(DT["b",],silent=TRUE))
?setkey
setkey(DT,x)
DT
tables()
haskey(DT)
DT["b",]
DT["b"]
DT["b",mult="first"]
grpsize = ceiling(1e7/26^2)
DT["b",mult="middle"]
DT["b",mult="all"]
tt=system.time( DF <- data.frame(
x=rep(LETTERS,each=26*grpsize),
y=rep(letters,each=grpsize),
v=runif(grpsize*26^2),
stringsAsFactors=FALSE)
)
tt
head(DF,3)
tail(DF,3)
dim(DF)
tt=system.time(ans1 <- DF[DF$x=="R" & DF$y=="h",])
tt
head(ans1,3)
dim(ans1)
DT = as.data.table(DF)
system.time(setkey(DT,x,y))
ss=system.time(ans2 <- DT[list("R","h")])
ss
head(ans2,3)
dim(ans2)
identical(ans1$v, ans2$v)
system.time(ans1 <- DT[x=="R" & y=="h",]) # works but is using data.table badly
system.time(ans2 <- DF[DF$x=="R" & DF$y=="h",])
mapply(identical,ans1,ans2)
identical( DT[list("R","h"),], DT[.("R","h"),])
DT[,sum(v)]
DT[,sum(v),by=x]
ttt=system.time(tt <- tapply(DT$v,DT$x,sum)); ttt
sss=system.time(ss <- DT[,sum(v),by=x]); sss
head(tt)
head(ss)
identical(as.vector(tt), ss$V1)
ttt=system.time(tt <- tapply(DT$v,list(DT$x,DT$y),sum)); ttt
sss=system.time(ss <- DT[,sum(v),by="x,y"]); sss
tt[1:5,1:5]
head(ss)
identical(as.vector(t(tt)), ss$V1)
example(data.table)
q()
libre
library(dplyr)
library(data.tabl;e)
library(data.table)
q()
install.packages("xmlview")
install.packages("xmlview")
devtools::install_github("hrbrmstr/xmlview")
library(xmlview)
library(xml2)
# available styles
highlight_styles()
# plain character
txt <- "<note><to>Tove</to><from>Jani</from><heading>Reminder</heading><body>Don't forget me this weekend!</body></note>"
xml_view(txt)
# xml document
doc <- read_xml(txt)
xml_view(doc, style="obsidian")
xml_view(xml_find_all(doc, ".//to"), style="github-gist")
xml_view(read_xml(system.file("extdata/dwml.xml", package="xmlview")))
xml_view(read_xml(system.file("extdata/getHistory.xml", package="xmlview")), "androidstudio")
xml_view(read_xml(system.file("extdata/input.xml", package="xmlview")), "sunburst")
# SO: http://stackoverflow.com/questions/34664028/extract-xml-data-using-xmlsapply-in-r
doc <- read_xml("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
xml_view(xml_find_all(doc, ".//*[contains(@_id, '7')]"), style="monokai_sublime")
####
library(xml2)
doc <- read_xml("http://www.npr.org/rss/rss.php?id=1001")
str(doc)
xml_view(doc, add_filter=TRUE)
xml2::xml_find_all(doc, './/dc:creator', ns=xml2::xml_ns(doc))
xml_text(xml2::xml_find_all(doc, './/link[contains(., "soccer")]', ns=xml2::xml_ns(doc)))
xml_text(xml2::xml_find_all(doc, './/link[contains(., "soccer")]', ns=xml2::xml_ns(doc)))
q()
getwd()
setwd("~/Documents/scuCamp2016/")
dir()
![](giphy.gif)
?MASS::fractions
install.packages("titanic")
library(rpart)
library(titanic)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train, method="class")
data("Titanic")
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train, method="class")
train <- data("Titanic")
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train, method="class")
train <- Titanic
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train, method="class")
hesd(Titanic)
head(Titanic)
str(Titanic)
?substr
library(rpart)
z.auto <- rpart(Mileage ~ Weight, car.test.frame)
summary(z.auto)
fit <- rpart(Price ~ Mileage + Type + Country, cu.summary)
par(xpd = TRUE)
plot(fit, compress = TRUE)
text(fit, use.n = TRUE)
View(cu.summary)
View(cu.summary)
deck = rep(c(1:10, 10, 10, 10), 4)
deck
shuffle_decks = function(n) sample(rep(deck, n))
shuffle_decks(deck)
shuffle_decks(1)
shuffle_decks(2)
library(rpart)
fit <- rpart(Price ~ Mileage + Type + Country, cu.summary)
par(xpd = TRUE); plot(fit, compress = TRUE); text(fit, use.n = TRUE)
par(xpd = TRUE)
plot(fit)
text(fit, use.n = TRUE)
?text
?text.rpart
par(xpd = TRUE); plot(fit, compress = TRUE); text(fit, use.n = FALSE)
par(xpd = TRUE); plot(fit, compress = TRUE); text(fit, use.n = TRUE)
fit <- rpart(Price ~ Mileage + Type + Country, cu.summary)
plot(fit, compress = TRUE); text(fit, use.n = TRUE)
par(xpd = TRUE); rpart.plot(fit, compress = TRUE); text(fit, use.n = TRUE)
install.packages("rpart.plot")
rpart.plot::rpart.plot(fit)
splitPair = function(hand) {
list(
new_hand(hand$shoe, cards = c(hand$cards[1], hand$shoe(1)),
bet = hand$bet),
new_hand(hand$shoe, cards = c(hand$cards[2], hand$shoe(1)),
bet = hand$bet)
)
}
splitHand = splitPair(myCards); splitHand
deck = rep(c(1:10, 10, 10, 10), 4)
handValue = function(cards) {
value = sum(cards)
# Check for an Ace and change value if it doesn't bust
if (any(cards == 1) && value <= 11)
value = value + 10
# Check bust (set to 0); check black jack (set to 21.5)
if(value > 21)
0
else if (value == 21 && length(cards) == 2)
21.5 # Blackjack
else
value
}
winnings = function(dealer, players){
(players > dealer & players > 21) * 1.5 + # blackjack
(players > dealer & players <= 21) * 1 +  # win
(players < dealer | players == 0) * -1    # lose
}
test_cards = list( c(10, 1), c(10, 5, 6), c(10, 1, 1),
c(7, 6, 1, 5), c(3, 6, 1, 1),
c(2, 3, 4, 10), c(5, 1, 9, 1, 1),
c(5, 10, 7), c(10, 9, 1, 1, 1))
test_cards_val = c(21.5, 21, 12, 19, 21, 19, 17, 0, 0)
identical(test_cards_val, sapply(test_cards, handValue))
shoe = function(m = 1) sample(deck, m, replace = TRUE)
new_hand = function(shoe, cards = shoe(2), bet = 1) {
list(bet = bet, shoe = shoe, cards = cards)
}
new_hand = function(shoe, cards = shoe(2), bet = 1, ...) {
structure(list(bet = bet, shoe = shoe, cards = cards),
class = "hand")
}
print.hand = function(x, ...) {
cat("Blackjack hand: ", paste(x$cards, collapse = "-"),
" (", handValue(x$cards), ").  Bet: ", x$bet,
"\n", sep = "")
}
myCards = new_hand(shoe, bet = 7)
myCards
hit = function(hand) {
hand$cards = c(hand$cards, hand$shoe(1))
hand
}
hit(myCards)
stand = function(hand) hand
dd =  function(hand) {
hand$bet = hand$bet * 2
hand = hit(hand)
stand(hand)
}
dd(myCards)
splitPair = function(hand) {
list(
new_hand(hand$shoe, cards = c(hand$cards[1], hand$shoe(1)),
bet = hand$bet),
new_hand(hand$shoe, cards = c(hand$cards[2], hand$shoe(1)),
bet = hand$bet)
)
}
splitHand = splitPair(myCards); splitHand
q()
